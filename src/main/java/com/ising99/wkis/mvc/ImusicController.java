package com.ising99.wkis.mvc;import com.ising99.wkis.common.ErrorCode;import com.ising99.wkis.common.WebConfig;import com.ising99.wkis.domain.*;import com.ising99.wkis.parameter.ImusicChannelMusicParam;import com.ising99.wkis.parameter.ImusicLikeParam;import com.ising99.wkis.parameter.ImusicHateParam;import com.ising99.wkis.parameter.ImusicMusicAddParam;import com.ising99.wkis.service.ImusicService;import org.apache.log4j.Logger;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.ising99.wkis.common.SessionInfo;import com.ising99.wkis.common.SessionManager;import org.springframework.web.servlet.ModelAndView;import javax.annotation.Resource;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping("imusic")public class ImusicController extends BaseController {    private static final Logger logger = Logger.getLogger(ImusicController.class);    @Resource    ImusicService imusicService;    /**     * 获取随意听版本     *     * @param type     * @return     */    @RequestMapping("/ver")    public ModelAndView getVersion(Integer type, Integer language) throws Exception {//        if (type == null) {//            this.responseErrorCode(ErrorCode.PARAMETER_ERROR);//            return "";//        }//        if (type < 1) {//            this.responseErrorCode(ErrorCode.PARAMETER_ERROR);//            return "";//        }        //String version = imusicService.getVersionInfoByAppId(type, language);        String version = "";        if (version == "") {            version = "";            throw new Exception();        }        //return "{\"version\":\"" + version + "\"}";        Map map = new HashMap<String, String>();        map.put("message","error");        ModelAndView mv = new ModelAndView("error",map);        return mv;    }    /**     * 获取频道列表及相关信息     *     * @return     */    @RequestMapping("/channel")    @ResponseBody    public List<Map> getChannelList(Integer language) throws Exception {        List<Map> jsonList = new ArrayList<Map>();        List<ImusicChannelPage> listpage = imusicService.getChannelPageList(language);        List<ImusicChannel> list = imusicService.getChannelList(language);        for (ImusicChannelPage channelPage : listpage) {            Map jsonMap = new HashMap();            jsonMap.put("pageindex", channelPage.getPageindex());            List<ImusicChannelJson> pageList = new ArrayList<ImusicChannelJson>();            for (int i = 0; i < list.size(); i++) {                if (list.get(i).getPageindex() == channelPage.getPageindex()) {                    ImusicChannelJson imusic = new ImusicChannelJson();                    imusic.setName(list.get(i).getName());                    imusic.setId(list.get(i).getId());                    String img = list.get(i).getImg();                    if (img != null && img.length() != 0) {                        img = WebConfig.MANAGE_URL + img;                    }                    imusic.setImg(img);                    imusic.setX(list.get(i).getX());                    imusic.setY(list.get(i).getY());                    imusic.setWidth(list.get(i).getWidth());                    imusic.setHeight(list.get(i).getHeight());                    imusic.setType(list.get(i).getType());                    pageList.add(imusic);                }            }            jsonMap.put("pages", pageList);            jsonList.add(jsonMap);        }        return jsonList;    }    /**     * 获取随意听歌曲列表     *     * @param pageindex     * @param pagesize     * @param channelid     * @return     */    @RequestMapping("/channel/music")    @ResponseBody    public PageData<ImusicChannelMusic> getMusicList(Integer pageindex, Integer pagesize, Integer channelid, Integer language) throws Exception {        ImusicChannelMusicParam param = new ImusicChannelMusicParam();        param.setChannelid(channelid);        param.setPageindex(pageindex);        param.setPagesize(pagesize);        param.setLanguage(language);        return imusicService.getMusicList(param);    }    /**     * 获取随意听背景列表     *     * @return     */    @RequestMapping("/bg")    @ResponseBody    public List<ImusicBg> getBgList() throws Exception {        List<ImusicBg> list = new ArrayList<ImusicBg>();        return imusicService.getBgList();    }    /**     * 获取随意听乐器列表     *     * @return     */    @RequestMapping("/instrument")    @ResponseBody    public List<ImusicInstrument> getInstrumentList(Integer language) throws Exception {        List<ImusicInstrument> list = new ArrayList<ImusicInstrument>();        return imusicService.getInstrumentList(language);    }    /**     * 获取随意听场景列表     *     * @return     */    @RequestMapping("/scene")    @ResponseBody    public List<ImusicScene> getSceneList(Integer language) throws Exception {        List<ImusicScene> list = new ArrayList<ImusicScene>();        return imusicService.getSceneList(language);    }    /**     * 获取随意听最爱歌曲列表     *     * @param pageindex     * @param pagesize     * @param session     * @return     */    @RequestMapping("/like")    @ResponseBody    public PageData<ImusicLike> getLikeList(Integer pageindex, Integer pagesize, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e.toString(), e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return null;        }        ImusicLikeParam param = new ImusicLikeParam();        param.setUserid(userid);        param.setPageindex(pageindex);        param.setPagesize(pagesize);        param.setLanguage(language);        return imusicService.getLikeList(param);    }    /**     * 获取随意听不喜欢歌曲列表     *     * @param pageindex     * @param pagesize     * @param session     * @return     */    @RequestMapping("/hate")    @ResponseBody    public PageData<ImusicHate> getHateList(Integer pageindex, Integer pagesize, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e.toString(), e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return null;        }        ImusicHateParam param = new ImusicHateParam();        param.setUserid(userid);        param.setPageindex(pageindex);        param.setPagesize(pagesize);        param.setLanguage(language);        return imusicService.getHateList(param);    }    /**     * 随意听添加喜欢歌曲     *     * @param channelid     * @param songid     * @param session     * @return     */    @RequestMapping("/like/add")    @ResponseBody    public String addLike(Integer channelid, String songid, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return "";        }        ImusicMusicAddParam param = new ImusicMusicAddParam();        param.setUserid(userid);        param.setChannelId(channelid);        param.setSongId(songid);        param.setLanguage(language);        try {            imusicService.likeadd(param);            return "ok";        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.SERVER_ERROR);            return "";        }    }    /**     * 随意听添加不喜欢歌曲     *     * @param channelid     * @param songid     * @param session     * @return     */    @RequestMapping("/hate/add")    @ResponseBody    public String addHate(Integer channelid, String songid, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return "";        }        ImusicMusicAddParam param = new ImusicMusicAddParam();        param.setUserid(userid);        param.setChannelId(channelid);        param.setSongId(songid);        param.setLanguage(language);        try {            imusicService.hateadd(param);            return "ok";        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.SERVER_ERROR);            return "";        }    }    /**     * 随意听添加不喜欢歌曲     *     * @param songid     * @param session     * @return     */    @RequestMapping("/like/delete")    @ResponseBody    public String deleteLike(String songid, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return "";        }        if (songid != null && !songid.equals("")) {            ImusicLikeParam param = new ImusicLikeParam();            param.setSongid(songid);            param.setUserid(userid);            param.setLanguage(language);            imusicService.likedelete(param);            return "ok";        } else {            responseErrorCode(ErrorCode.PARAMETER_ERROR);            return "";        }    }    /**     * 随意听添加不喜欢歌曲     *     * @param songid     * @param session     * @return     */    @RequestMapping("/hate/delete")    @ResponseBody    public String deleteHate(String songid, String session, Integer language) throws Exception {        String userid = "";        try {            SessionInfo sessionInfo = SessionManager.readSession(session);            userid = sessionInfo.getUserId();        } catch (Exception e) {            logger.error(e);            this.responseErrorCode(ErrorCode.USER_ACCOUNT_ERROR);            return "";        }        if (songid != null && !songid.equals("")) {            ImusicHateParam param = new ImusicHateParam();            param.setSongid(songid);            param.setUserid(userid);            param.setLanguage(language);            int ok = imusicService.hatedelete(param);            return "ok";        } else {            responseErrorCode(ErrorCode.PARAMETER_ERROR);            return "";        }    }}